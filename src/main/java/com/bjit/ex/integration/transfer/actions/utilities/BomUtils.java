/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.bjit.ex.integration.transfer.actions.utilities;

import com.bjit.common.code.utility.conversion.unit.InventoryUnitConverter;
import com.bjit.ex.integration.mapproject.xml_mapping_model.XmlMapElementAttribute;
import com.bjit.ex.integration.transfer.service.impl.LN.Constants;
import com.bjit.ex.integration.transfer.util.ApplicationProperties;
import com.infor.businessinterface.billofmaterial_val.ProcessItemBOMDataRequestType.DataArea.BillOfMaterialVAL;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import matrix.db.BusinessObject;
import matrix.db.Context;
import matrix.db.RelationshipWithSelect;
import matrix.util.MatrixException;

/**
 *
 * @author BJIT
 */
public class BomUtils {

    private static final org.apache.log4j.Logger BOM_UTILS_LOGGER = org.apache.log4j.Logger.getLogger(BomUtils.class);
    private HashMap<String, HashMap<String, List<XmlMapElementAttribute>>> attributeAndPropertyMap;
    private HashMap<String, BillOfMaterialVAL> bomLinesMap;
    private List<XmlMapElementAttribute> relationShipAttributeList;
    private TransferObjectUtils transferObjectUtils;
    private final String XML_ATTRIBUTE_MAPPING_KEY = Constants.XML_ATTRIBUTE_MAPPING_KEY;
    //private final List<String> restrictWidthTransferUnitList = Arrays.asList("m", "ft", "in");
    private HashMap<String, Integer> duplicateLineMap;

    /*public BomUtils(TransferObjectUtils transferObjectUtils) {
        this.__init__(transferObjectUtils);
    }*/
    public void __init__(TransferObjectUtils transferObjectUtils) {
        this.transferObjectUtils = transferObjectUtils;
        this.attributeAndPropertyMap = this.transferObjectUtils.getAttributeAndPropertyMap();
        this.relationShipAttributeList = null;
        this.bomLinesMap = null;
        this.relationShipAttributeList = new ArrayList<>();
        this.bomLinesMap = new HashMap<>();
        this.duplicateLineMap = new HashMap<>();
    }

    /**
     * Finds out the business object Id. Searches inside the bomLinesMap. If the
     * business object id exists in it then nothing will happen. If it is not
     * then a new key will be generated by the business objects Id.
     *
     * value of bomLinesMap is BillOfMaterial(BOM) object. Where the current
     * object inserted as a BillOfMaterial (BOM) object
     *
     * @param businessObject
     */
    public void createObjectLinesMap(BusinessObject businessObject) {
        String objectId = businessObject.getObjectId();

        if (!bomLinesMap.containsKey(objectId)) {
            bomLinesMap.put(objectId, createBillOfMaterialVAL(businessObject));
        }
    }

    /*public void createParentObjectLinesMap(BusinessObject businessObject) {
        String objectId = businessObject.getObjectId();

        if (!bomLinesMap.containsKey(objectId)) {
            bomLinesMap.put(objectId, createParentBillOfMaterialVAL(businessObject));
        }
    }*/
    /**
     * Creates BOM object
     *
     * @param businessObject
     * @return
     */
    public BillOfMaterialVAL createBillOfMaterialVAL(BusinessObject businessObject) {
        try {
            BillOfMaterialVAL billOfMaterialValue = new BillOfMaterialVAL();

            BillOfMaterialVAL.ItemID itemId = new BillOfMaterialVAL.ItemID();
            itemId.setID(businessObject.getName());
            itemId.setMainItemRevision(businessObject.getRevision());
            itemId.setUpdateOneLine("FALSE");
            billOfMaterialValue.setItemID(itemId);
            return billOfMaterialValue;
        } catch (Exception exp) {
            exp.printStackTrace(System.out);
            throw exp;
        }
    }

    /*public BillOfMaterialVAL createParentBillOfMaterialVAL(BusinessObject businessObject) {
        try {
            BillOfMaterialVAL billOfMaterialValue = new BillOfMaterialVAL();

            BillOfMaterialVAL.ItemID itemId = new BillOfMaterialVAL.ItemID();
            itemId.setID(businessObject.getName());
            itemId.setUpdateOneLine("TRUE");
            billOfMaterialValue.setItemID(itemId);
            return billOfMaterialValue;
        } catch (Exception exp) {
            exp.printStackTrace(System.out);
            throw exp;
        }
    }*/
    /**
     *
     * Finds out the parent of the current object searches in bomLinesMap. Then
     * creates a BOMLine object. Assigns the properties or attributes of to the
     * BOMLine object then adds the BOMLine object under the parent object
     *
     * @param relationShipWithSelect
     * @param context
     * @param itemWithLengthWidthMap
     * @throws matrix.util.MatrixException
     * @throws java.lang.Exception
     */
    public void findBOMLines(Context context, RelationshipWithSelect relationShipWithSelect, HashMap<String, String[]> itemWithLengthWidthMap) throws MatrixException, Exception {
        try {
            BusinessObject parentBusinessObject = relationShipWithSelect.getFrom();
            parentBusinessObject.open(context);

            createObjectLinesMap(parentBusinessObject);
            BillOfMaterialVAL.Lines parentLines = findLines(context, relationShipWithSelect, itemWithLengthWidthMap);
            addBOMVALLinesToABom(parentLines, relationShipWithSelect);

            parentBusinessObject.close(context);
        } catch (MatrixException exp) {
            exp.printStackTrace(System.out);
            throw exp;
        }
    }

    /*public void findParentBOMLines(BusinessObject parentBO, RelationshipWithSelect relationShipWithSelect, Context context) throws MatrixException, Exception {
        try {
            BusinessObject parentBusinessObject = parentBO;
            parentBusinessObject.open(context);

            createParentObjectLinesMap(parentBusinessObject);
            BusinessObject childBO = relationShipWithSelect.getTo();
            BillOfMaterialVAL.Lines parentLines = findParentLines(childBO, relationShipWithSelect, context);
            addBOMVALLinesToABom(parentLines, relationShipWithSelect);

            parentBusinessObject.close(context);
        } catch (MatrixException exp) {
            exp.printStackTrace(System.out);
            throw exp;
        }
    }*/
    /**
     * Creates a linear list of BOMVAL from bomLinesMap
     *
     * @return
     */
    public List<BillOfMaterialVAL> createBOMVALList() {
        List<BillOfMaterialVAL> bomValList = new ArrayList<>();

        bomLinesMap.forEach((key, value) -> bomValList.add(value));
        return bomValList;
    }

    /**
     * Adds a childBOM line object to the existing bom object as line inside the
     * bomLinesMap by searching with parent business object id
     *
     * @param lines
     * @param relationShipWithSelect
     */
    public void addBOMVALLinesToABom(BillOfMaterialVAL.Lines lines, RelationshipWithSelect relationShipWithSelect) throws Exception {
        try {
            String lineKey = lines.getPosition() + "_" + lines.getComponent();
            BillOfMaterialVAL billOfMaterialValue = bomLinesMap.get(relationShipWithSelect.getFrom().getObjectId());
            if (!duplicateLineMap.containsKey(lineKey)) {
                BigDecimal currentRelNetQty = lines.getNetQuantity();
                if (currentRelNetQty == null) {
                    currentRelNetQty = new BigDecimal("1");
                    lines.setNetQuantity(currentRelNetQty);
                }
                billOfMaterialValue.getLines().add(lines);
                duplicateLineMap.put(lineKey, billOfMaterialValue.getLines().size() - 1);
            } else {
                int indexOfDuplicatePositionedRel = duplicateLineMap.get(lineKey);
                BillOfMaterialVAL.Lines existingLine = billOfMaterialValue.getLines().get(indexOfDuplicatePositionedRel);

                BigDecimal existingRelNetQty = existingLine.getNetQuantity();
                BigDecimal currentRelNetQty = lines.getNetQuantity();
                if (currentRelNetQty == null) {
                    currentRelNetQty = new BigDecimal("1");

                }
                BigDecimal updatedNetQty = existingRelNetQty.add(currentRelNetQty);

                lines.setNetQuantity(updatedNetQty);
                billOfMaterialValue.getLines().remove(indexOfDuplicatePositionedRel);
                billOfMaterialValue.getLines().add(indexOfDuplicatePositionedRel, lines);
            }
        } catch (Exception exp) {
            exp.printStackTrace(System.out);
            throw exp;
        }
    }

    public void clearDuplicateLineMap() {
        duplicateLineMap.clear();
    }

    /**
     * Reads the relationships name and from the attributeAndPropertyMap it
     * returns the specific relationship attribute list
     *
     * @param relationShipWithSelect
     * @return
     */
    public List<XmlMapElementAttribute> getBomObjectPropertyList(RelationshipWithSelect relationShipWithSelect) {
        relationShipAttributeList = attributeAndPropertyMap.get(relationShipWithSelect.getRelationshipType().getName()).get(XML_ATTRIBUTE_MAPPING_KEY);
        return relationShipAttributeList;
    }

    /**
     * Finds out the relationships attributes of the current object. Then
     * creates a BOMLine object. Assigns the values to the attributes of the
     * BOMLine object from the relationship select statement and returns the
     * childBusinessObjectLine object as BOMLine object
     *
     * @param context
     * @param relationShipWithSelect
     * @param itemWithLengthWidthMap
     * @return
     * @throws matrix.util.MatrixException
     */
    //int bomPos=1;
    public BillOfMaterialVAL.Lines findLines(Context context, RelationshipWithSelect relationShipWithSelect, HashMap<String, String[]> itemWithLengthWidthMap) throws MatrixException, Exception {
        try {
            relationShipAttributeList = getBomObjectPropertyList(relationShipWithSelect);
            BusinessObject childBO = relationShipWithSelect.getTo();
            String type = relationShipWithSelect.getTarget().getSelectData("type");
            String name = relationShipWithSelect.getTarget().getSelectData(ApplicationProperties.getProprtyValue("source.relationship.name"));
            String revision = relationShipWithSelect.getTarget().getSelectData(ApplicationProperties.getProprtyValue("source.relationship.revision"));
            String childPosition = relationShipWithSelect.getAttributeValues(context, ApplicationProperties.getProprtyValue("source.rel.position")).getValue();
            String unit = relationShipWithSelect.getTarget().getSelectData("attribute[" + ApplicationProperties.getProprtyValue("source.VAL.att.inventoryUnit") + "]");
            String childKey = name + "#" + revision + "#" + childPosition;
            BOM_UTILS_LOGGER.info("BOM Child unique key (Name#Revision#Position) : " + childKey);
            BillOfMaterialVAL.Lines childBusinessObjectLines = new BillOfMaterialVAL.Lines();
            Map<String, String> noteValueMap = new HashMap<>();

//            if (ApplicationProperties.getProprtyValue("destination.relationship.name").equalsIgnoreCase("component")) {
//                childBusinessObjectLines.setComponent(name);
//            } else if (ApplicationProperties.getProprtyValue("destination.relationship.revision").equalsIgnoreCase("componentRevision")) {
//                childBusinessObjectLines.setComponentRevision(revision);
//            }
            String itemMastership = "";
            try {
                /*
                For PDM ODI (CreateAssembly) item mastership will be PDM.
                 */
                itemMastership = childBO.getAttributeValues(context, ApplicationProperties.getProprtyValue("item.att.mastership")).getValue();
            } catch (MatrixException exp) {
                BOM_UTILS_LOGGER.error(exp);
            }

            childBusinessObjectLines.setComponent(name != null ? name.trim() : "");
            /*
            For PDM ODI (CreateAssembly) item and VAL item V6 will not send revision. These types of item's
            master is PDM. PDM will send these item and V6 will only send BOM. 
             */
//            if (!TransferObjectUtils.VALItemType.contains(type) && !itemMastership.equalsIgnoreCase("PDM")) {
//                childBusinessObjectLines.setComponentRevision(revision != null ? revision.trim() : "");
//            }

            relationShipAttributeList.forEach(xmlMapBomAttribute -> {
                if (xmlMapBomAttribute.getDestinationName().equalsIgnoreCase("position")) {
                    String ojectPosition = relationShipWithSelect.getSelectData(xmlMapBomAttribute.getSelectable());
                    int position = ojectPosition == null || ojectPosition.equals("") ? 0 : Integer.parseInt(ojectPosition);
                    childBusinessObjectLines.setPosition(BigInteger.valueOf(position));
                    BOM_UTILS_LOGGER.info("Item Name ::: " + name + " Position ::: " + position);
                    //bomPos++;
                } /*else if (xmlMapBomAttribute.getDestinationName().equalsIgnoreCase("ContinuousPosition")) {
                    String ojectPosition = relationShipWithSelect.getSelectData(xmlMapBomAttribute.getSelectable());
                    int position = ojectPosition == null || ojectPosition.equals("") ? 0 : Integer.parseInt(ojectPosition);
                    childBusinessObjectLines.setPosition(BigInteger.valueOf(position));
                    BOM_UTILS_LOGGER.info("Item Name ::: " + name + " Position ::: " + position);
                    //bomPos++;
                }*/ else if (xmlMapBomAttribute.getDestinationName().equalsIgnoreCase("suppliedBySubcontractor")) {
                    childBusinessObjectLines.setSuppliedBySubcontractor("true");
                } else if (xmlMapBomAttribute.getDestinationName().equalsIgnoreCase("NetQuantity")) {
                    String byProductValue = "";
                    try {
                        byProductValue = relationShipWithSelect.getAttributeValues(context, ApplicationProperties.getProprtyValue("rel.rfn.byproduct")).getValue();
                    } catch (MatrixException ex) {
                        BOM_UTILS_LOGGER.error(ex.getMessages());
                    }
                    String netQuantity = relationShipWithSelect.getSelectData(xmlMapBomAttribute.getSelectable());
                    //Usage-coefficent value conversion based on Inventory Unit. 
                    try {
                        //String inventoryUnit = childBO.getAttributeValues(context, ApplicationProperties.getProprtyValue("source.VAL.att.inventoryUnit")).getValue();
                        String inventoryUnit = unit;
                        BOM_UTILS_LOGGER.info("Usage-Coefficent Value ::: " + netQuantity);
                        BOM_UTILS_LOGGER.info("Inventory Unit ::: " + inventoryUnit);
                        InventoryUnitConverter converter = new InventoryUnitConverter();
                        double convertedNetQuantity = converter.convertFromBaseUnit(netQuantity, inventoryUnit);
                        netQuantity = Double.toString(convertedNetQuantity);
                        BOM_UTILS_LOGGER.info("Usage-Coefficent Converted Value ::: " + netQuantity);
                    } catch (MatrixException ex) {
                        BOM_UTILS_LOGGER.error(ex);
                    } catch (Exception ex) {
                        BOM_UTILS_LOGGER.error(ex);
                    }
                    int len = netQuantity.length();
                    if (len > 13) {
                        netQuantity = netQuantity.substring(0, 13);
                    }
                    double quantity = netQuantity == null || netQuantity.equals("") ? 0.0 : Double.parseDouble(netQuantity);
                    Double quantityDoubleValue = TransferObjectUtils.roundToDouble(String.valueOf(quantity), 4, "floor");
                    if (quantityDoubleValue != null) {
                        if (byProductValue != null && !byProductValue.equals("")) {
                            if (byProductValue.equalsIgnoreCase("TRUE")) {
                                childBusinessObjectLines.setNetQuantity(new BigDecimal(String.valueOf(quantityDoubleValue)).multiply(BigDecimal.valueOf(-1)));
                            } else {
                                childBusinessObjectLines.setNetQuantity(new BigDecimal(String.valueOf(quantityDoubleValue)));
                            }
                        } else {
                            childBusinessObjectLines.setNetQuantity(new BigDecimal(String.valueOf(quantityDoubleValue)));
                        }
                    }
//                    BigDecimal quantityDecimal = new BigDecimal(String.valueOf(quantity));
//                    quantityDecimal = quantityDecimal.setScale(4, BigDecimal.ROUND_DOWN);
                } else if (xmlMapBomAttribute.getDestinationName().equalsIgnoreCase("Length")) {
                    /*if (itemWithLengthWidthMap.containsKey(childKey)) {
                        String length = itemWithLengthWidthMap.get(childKey)[0];
                        //String length = relationShipWithSelect.getSelectData(xmlMapBomAttribute.getSelectable());
                        if (length.length() > 0) {
                            double lengthDouble = Double.parseDouble(length);
                            lengthDouble = lengthDouble * 1000;
                            childBusinessObjectLines.setLength(new BigDecimal(lengthDouble));
                        }
                    }*/
                    String length = relationShipWithSelect.getSelectData(xmlMapBomAttribute.getSelectable());
                    if (length.length() > 0) {
                        double lengthDouble = Double.parseDouble(length);
                        lengthDouble = lengthDouble * 1000;
                        childBusinessObjectLines.setLength(new BigDecimal(lengthDouble));
                    }
                } else if (xmlMapBomAttribute.getDestinationName().equalsIgnoreCase("Width") /*&& !restrictWidthTransferUnitList.contains(unit)*/) {
                    /*if (itemWithLengthWidthMap.containsKey(childKey)) {
                        String width = itemWithLengthWidthMap.get(childKey)[1];
                        //String width = relationShipWithSelect.getSelectData(xmlMapBomAttribute.getSelectable());
                        if (width.length() > 0) {
                            double widthDouble = Double.parseDouble(width);
                            widthDouble = widthDouble * 1000;
                            childBusinessObjectLines.setWidth(new BigDecimal(widthDouble));
                        }
                    }*/
                    String width = relationShipWithSelect.getSelectData(xmlMapBomAttribute.getSelectable());
                    if (width.length() > 0) {
                        double widthDouble = Double.parseDouble(width);
                        widthDouble = widthDouble * 1000;
                        childBusinessObjectLines.setWidth(new BigDecimal(widthDouble));
                    }
                } else if (xmlMapBomAttribute.getDestinationName().equalsIgnoreCase("BOM Common Text")) {
                    String bomCommonText = relationShipWithSelect.getSelectData(xmlMapBomAttribute.getSelectable());
                    noteValueMap.put("bomCommonText", bomCommonText);
                } else if (xmlMapBomAttribute.getDestinationName().equalsIgnoreCase("BOM Purchasing Text")) {
                    String bomPurchasingText = relationShipWithSelect.getSelectData(xmlMapBomAttribute.getSelectable());
                    noteValueMap.put("bomPurchasingText", bomPurchasingText);
                } else if (xmlMapBomAttribute.getDestinationName().equalsIgnoreCase("BOM Manufacturing Text")) {
                    String bomManufacturingText = relationShipWithSelect.getSelectData(xmlMapBomAttribute.getSelectable());
                    noteValueMap.put("bomManufacturingText", bomManufacturingText);
                }
            });

            setBOMNoteValues(childBusinessObjectLines, noteValueMap);

            return childBusinessObjectLines;
        } catch (Exception exp) {
            BOM_UTILS_LOGGER.error(exp);
            //exp.printStackTrace(System.out);
            throw exp;
        }
    }

    private void setBOMNoteValues(BillOfMaterialVAL.Lines childBusinessObjectLine, Map<String, String> noteValMap) {
        BillOfMaterialVAL.Lines.Note itemTextNote = new BillOfMaterialVAL.Lines.Note();
        itemTextNote.setLanguageID(ApplicationProperties.getProprtyValue("LN.default.language.id"));
        itemTextNote.setType(ApplicationProperties.getProprtyValue("LN.bom.text.type"));
        StringBuilder bomTextBuilder = new StringBuilder();

        if (noteValMap.containsKey("bomCommonText")) {
            String bomCommonTextVal = noteValMap.get("bomCommonText");
            if (bomCommonTextVal != null && bomCommonTextVal.trim().length() > 0) {
                bomTextBuilder.append(bomCommonTextVal);
            }
        }
        if (noteValMap.containsKey("bomManufacturingText")) {
            String bomManufacturingTextVal = noteValMap.get("bomManufacturingText");
            if (bomManufacturingTextVal != null && bomManufacturingTextVal.trim().length() > 0) {
                if (bomTextBuilder.toString().trim().length() > 0) {
                    bomTextBuilder.append(ApplicationProperties.getProprtyValue("LN.note.text.separator.newline"));
//                    bomTextBuilder.append(" ");
                }
                bomTextBuilder.append(ApplicationProperties.getProprtyValue("LN.bom.manufacturing.text.prefix"));
                bomTextBuilder.append(bomManufacturingTextVal);
            }
        }
        if (noteValMap.containsKey("bomPurchasingText")) {
            String bomPurchasinTextVal = noteValMap.get("bomPurchasingText");
            if (bomPurchasinTextVal != null && bomPurchasinTextVal.trim().length() > 0) {
                if (bomTextBuilder.toString().trim().length() > 0) {
                    bomTextBuilder.append(ApplicationProperties.getProprtyValue("LN.note.text.separator.newline"));
//                    bomTextBuilder.append(" ");
                }
                bomTextBuilder.append(ApplicationProperties.getProprtyValue("LN.bom.purchasing.text.prefix"));
                bomTextBuilder.append(bomPurchasinTextVal);
            }
        }

        itemTextNote.setValue(getLNSupportedStringsForNoteValues(bomTextBuilder.toString()));
        childBusinessObjectLine.getNote().add(itemTextNote);
    }

    /**
     * @param value
     * @return
     */
    private String getLNSupportedStringsForNoteValues(String value) {
        int maxLen = Integer.parseInt(ApplicationProperties.getProprtyValue("LN.note.text.max.length"));
        if (value.length() > maxLen) {
            return value.substring(0, maxLen);
        }
        return value;
    }

    /*public BillOfMaterialVAL.Lines findParentLines(BusinessObject childBO, RelationshipWithSelect relationShipWithSelect, Context context) throws Exception {
        try {
            relationShipAttributeList = getBomObjectPropertyList(relationShipWithSelect);

            String type = relationShipWithSelect.getTarget().getSelectData("type");
            childBO.open(context);
            String name = childBO.getName();
            String revision = childBO.getRevision();
            childBO.close(context);
            String unit = relationShipWithSelect.getTarget().getSelectData(ApplicationProperties.getProprtyValue("source.VAL.att.inventoryUnit"));
            BillOfMaterialVAL.Lines childBusinessObjectLines = new BillOfMaterialVAL.Lines();

            if (ApplicationProperties.getProprtyValue("destination.relationship.name").equalsIgnoreCase("component")) {
                childBusinessObjectLines.setComponent(name);
            } else if (ApplicationProperties.getProprtyValue("destination.relationship.revision").equalsIgnoreCase("componentRevision")) {
                childBusinessObjectLines.setComponentRevision(revision);
            }

            relationShipAttributeList.forEach(xmlMapBomAttribute -> {
                if (xmlMapBomAttribute.getDestinationName().equalsIgnoreCase("position")) {
                    String ojectPosition = relationShipWithSelect.getSelectData(xmlMapBomAttribute.getSelectable());
                    int position = ojectPosition == null || ojectPosition.equals("") ? 0 : Integer.parseInt(ojectPosition);
                    childBusinessObjectLines.setPosition(BigInteger.valueOf(position));
                    BOM_UTILS_LOGGER.info("Item Name ::: " + name + " Position ::: " + position);
                    //bomPos++;
                } else if (xmlMapBomAttribute.getDestinationName().equalsIgnoreCase("suppliedBySubcontractor")) {
                    childBusinessObjectLines.setSuppliedBySubcontractor("true");
                } else if (xmlMapBomAttribute.getDestinationName().equalsIgnoreCase("NetQuantity")) {
                    String netQuantity = relationShipWithSelect.getSelectData(xmlMapBomAttribute.getSelectable());
                    int len = netQuantity.length();
                    if (len > 13) {
                        netQuantity = netQuantity.substring(0, 13);
                    }
                    double quantity = netQuantity == null || netQuantity.equals("") ? 0.0 : Double.parseDouble(netQuantity);
                    Double quantityDoubleValue = TransferObjectUtils.roundToDouble(String.valueOf(quantity), 4, "floor");
                    if (quantityDoubleValue != null) {
                        childBusinessObjectLines.setNetQuantity(new BigDecimal(String.valueOf(quantityDoubleValue)));
                    }
//                    BigDecimal quantityDecimal = new BigDecimal(String.valueOf(quantity));
//                    quantityDecimal = quantityDecimal.setScale(4, BigDecimal.ROUND_DOWN);
                } else if (xmlMapBomAttribute.getDestinationName().equalsIgnoreCase("Length")) {
                    String length = relationShipWithSelect.getSelectData(xmlMapBomAttribute.getSelectable());
                    if (length.length() > 0) {
                        double lengthDouble = Double.parseDouble(length);
                        lengthDouble = lengthDouble * 1000;
                        childBusinessObjectLines.setLength(new BigDecimal(lengthDouble));
                    }
                } else if (xmlMapBomAttribute.getDestinationName().equalsIgnoreCase("Width") && !restrictWidthTransferUnitList.contains(unit)) {
                    String width = relationShipWithSelect.getSelectData(xmlMapBomAttribute.getSelectable());
                    if (width.length() > 0) {
                        double widthDouble = Double.parseDouble(width);
                        widthDouble = widthDouble * 1000;
                        childBusinessObjectLines.setWidth(new BigDecimal(widthDouble));
                    }
                }
            });
            return childBusinessObjectLines;
        } catch (Exception exp) {
            exp.printStackTrace(System.out);
            throw exp;
        }
    }*/
}
